{"meta":{"title":"Ibhi's blog","subtitle":"Limited only by imagination","description":"To help noobs and to bring them upto speed","author":"Ibrahim","url":"http://blog.noobish.in"},"pages":[{"title":"About","date":"2015-10-08T00:04:23.000Z","updated":"2018-01-13T07:23:46.898Z","comments":false,"path":"About/index.html","permalink":"http://blog.noobish.in/About/index.html","excerpt":"","text":""}],"posts":[{"title":"AWS Helpful Links","slug":"AWS-Helpful-Links","date":"2018-01-15T06:26:31.000Z","updated":"2018-01-15T06:32:15.000Z","comments":true,"path":"2018/01/15/AWS-Helpful-Links/","link":"","permalink":"http://blog.noobish.in/2018/01/15/AWS-Helpful-Links/","excerpt":"","text":"I am planning to document here a list of curated links related to various topics related to AWS in a hopefully well organized and structured way. And also I will try to keep them updated as much as possible.VPCSetting up and testing a NAT instance in AWS - https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.htmlAPI GatewayUsing API Gateway with VPC endpoints via AWS Lambda - https://aws.amazon.com/blogs/compute/using-api-gateway-with-vpc-endpoints-via-aws-lambda/AWS LambdaExamples of How to Use AWS Lambda - https://docs.aws.amazon.com/lambda/latest/dg/use-cases.html","categories":[{"name":"Cloud","slug":"Cloud","permalink":"http://blog.noobish.in/categories/Cloud/"}],"tags":[{"name":"aws","slug":"aws","permalink":"http://blog.noobish.in/tags/aws/"},{"name":"links","slug":"links","permalink":"http://blog.noobish.in/tags/links/"},{"name":"vpc","slug":"vpc","permalink":"http://blog.noobish.in/tags/vpc/"},{"name":"nat","slug":"nat","permalink":"http://blog.noobish.in/tags/nat/"},{"name":"nat gateway","slug":"nat-gateway","permalink":"http://blog.noobish.in/tags/nat-gateway/"}]},{"title":"Using NGINX As Reverse Proxy","slug":"Using-NGINX-As-Reverse-Proxy","date":"2018-01-13T12:49:49.000Z","updated":"2018-01-13T15:58:45.852Z","comments":true,"path":"2018/01/13/Using-NGINX-As-Reverse-Proxy/","link":"","permalink":"http://blog.noobish.in/2018/01/13/Using-NGINX-As-Reverse-Proxy/","excerpt":"","text":"Use CaseWhen hosting our web applications, we often have one public IP address (i.e., an IP address visible to the outside world) using which we want to host multiple web apps. For example, one may wants to host three different web apps respectively for example1.com, example2.com, and example1.com/images on the same machine using a single IP address.How can we do that?Well, the good news is Internet browsers send the domain name inside HTTP requests and all we need to do is to parse the requested domain name and URL and then route the HTTP request to the actual web server. This can be easily by done with nginx by configuring it as a reverse proxy for different applications.Intall nginx (Ubuntu)Install nginx using apt-get:1$ sudo apt-get install nginx -y Configurationnginx default config file is located at /etc/nginx/sites-enabled/default, this is the file we need to modify. Let say we want to configure nginx to route requests from /blog, and /mail, respectively onto localhost:3000 and localhost:3001. 12345 +--- host/blog --------&gt; node.js on localhost:3000 |users --&gt; nginx --| | +--- host/mail ---&gt; node.js on localhost:3001 Lets modify the default nginx configuration (/etc/nginx/sites-enabled/default) to achieve the above use case as shown below 123456789101112131415location / &#123; # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404;&#125;location /blog &#123; rewrite ^/blog(.*) /$1 break; proxy_pass http://127.0.0.1:3000;&#125;location /mail &#123; rewrite ^/mail(.*) /$1 break; proxy_pass http://127.0.0.1:3001;&#125; proxy_pass simply tells nginx to forward requests to /blog to the server listening on http://127.0.0.1:3000.rewrite ^/blog(.*) /$1 break; regular expression tells nginx to capture anything after /blog and pass it to the proxy pass, this is needed because our nodejs web servers are listening on / not on /blog. break tells nginx to stop further lookup. Reload NGINXAfter making the above configuration changes, we need to reload nginx (no need to restart)1sudo service nginx reload Once it is sucessfully reloaded, we can test the above configuration by making requests to the above routes in our browser, like http://YOUR_PUBLIC_IP/blog and http://YOUR_PUBLIC_IP/mail should serve the response from nodejs applications running on port 3000 and 3001 respectively. Voila!! Here is a sample expressjs app, if you want to play with https://gist.github.com/ibhi/0ab0342ae140612078fdd3f7e1cdf6f1 Please let me know your feedback or comments in the comments section below.","categories":[{"name":"Web","slug":"Web","permalink":"http://blog.noobish.in/categories/Web/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://blog.noobish.in/tags/nginx/"},{"name":"reverse-proxy","slug":"reverse-proxy","permalink":"http://blog.noobish.in/tags/reverse-proxy/"}]},{"title":"Stop and Start Amazon EC2 instances at regular intervals using AWS Lambda","slug":"Starting-and-stopping-EC2-instances-on-schedule","date":"2018-01-13T07:31:54.000Z","updated":"2018-01-14T04:30:03.000Z","comments":true,"path":"2018/01/13/Starting-and-stopping-EC2-instances-on-schedule/","link":"","permalink":"http://blog.noobish.in/2018/01/13/Starting-and-stopping-EC2-instances-on-schedule/","excerpt":"","text":"RequirementRecently I was talking to a friend who was using AWS EC2 instances for their dev-test environment and complaining about the huge cost associated with running it. One of the suggestion I provided to reduce the cost was to stop the instances when not in use, as they were on-demand instances and AWS only charges for the running time. So I proposed a scheduled start and stopping of the instances during certain time of the day, for example, the dev-test instances will be automatically started every day at 9 in the morning and stopped at 9 in the night.SolutionWe can use a CloudWatch Event to trigger a Lambda function to start and stop EC2 instances at scheduled intervals. We can configure Cloud watch to emit a event based on a predefined schedule, and this event can trigger a lambda function and within the lambda function we can use the aws-sdk for nodejs to start and stop the specified instances.Lambda functions and permissionsLets create Lambda functions and configure necessary permissions step by step.Open the AWS Lambda console, and choose Create function.Choose Author from scratch.Enter a Name for your function, such as “StopEC2Instances”.Expand the Role drop-down menu, and choose Create a custom role. This opens a new tab or window in your browser.In the IAM Role drop-down menu, select Create a new IAM Role, and enter a Role Name, such as “lambda_start_stop_ec2.”Choose View Policy Document, Edit, and then choose Ok when prompted to read the documentation. Edit the policy as follows:12345678910111213141516171819202122&#123; \"Version\": \"2012-10-17\", \"Statement\": [ &#123; \"Effect\": \"Allow\", \"Action\": [ \"logs:CreateLogGroup\", \"logs:CreateLogStream\", \"logs:PutLogEvents\" ], \"Resource\": \"arn:aws:logs:*:*:*\" &#125;, &#123; \"Effect\": \"Allow\", \"Action\": [ \"ec2:Start*\", \"ec2:Stop*\" ], \"Resource\": \"*\" &#125; ]&#125; Choose Allow to finish creating the role and return to the AWS Lambda console. To stop your instances, enter the following into the Function code editor: 1234567891011121314151617181920212223242526// Enter the region your instances are in. Include only the region without specifying Availability Zone; e.g.; 'us-east-1'const region = 'XX-XXXXX-X';// Enter your instances here: ex. ['X-XXXXXXXX', 'X-XXXXXXXX']const instances = ['X-XXXXXXXX'];var AWS = require('aws-sdk');AWS.config.update(&#123;region: region&#125;);exports.handler = (event, context, callback) =&gt; &#123; // TODO implement const ec2 = new AWS.EC2(&#123;apiVersion: '2016-11-15'&#125;); const params = &#123; InstanceIds: instances &#125;; ec2.stopInstances(params, (err, data) =&gt; &#123; if (err) &#123; console.log(\"Error\", err); callback(err); &#125; else if (data) &#123; console.log(\"Success\", data.StoppingInstances); callback(null, data.StoppingInstances); &#125; &#125;); &#125;; From the Runtime drop-down menu, choose nodejs. In Basic settings, enter 10 seconds for the function Timeout. Choose Save. Repeat these steps to create another function that starts your instances again by using the following: 1234567891011121314151617181920212223242526// Enter the region your instances are in. Include only the region without specifying Availability Zone; e.g.; 'us-east-1'const region = 'XX-XXXXX-X';// Enter your instances here: ex. ['X-XXXXXXXX', 'X-XXXXXXXX']const instances = ['X-XXXXXXXX'];var AWS = require('aws-sdk');AWS.config.update(&#123;region: region&#125;);exports.handler = (event, context, callback) =&gt; &#123; // TODO implement const ec2 = new AWS.EC2(&#123;apiVersion: '2016-11-15'&#125;); const params = &#123; InstanceIds: instances &#125;; ec2.startInstances(params, (err, data) =&gt; &#123; if (err) &#123; console.log(\"Error\", err); callback(err); &#125; else if (data) &#123; console.log(\"Success\", data.StartingInstances); callback(null, data.StartingInstances); &#125; &#125;); &#125;; Note: Use a Name and Description that indicate this function is used to start instances. You can use the previously created role. Test your newly created functions Open the AWS Lambda console, and choose Functions. Select your function, and then choose Test. In Event name, enter a name and then choose Create. Note: The body of the test event doesn’t impact your function because the function does not use it. Create a CloudWatch Event that triggers your Lambda function at night Open the Amazon CloudWatch console. Choose Events, and then choose Create rule. Choose Schedule under Event Source. Enter an interval of time or cron expression that tells Lambda when to stop your instances. For more information on the correct syntax, see Schedule Expression Syntax for Rules.eg: 30 3 * * ? *Note: Cron expressions are evaluated in UTC. Be sure to adjust the expression for your preferred time zone. Choose Add target, and then choose Lambda function. For Function, choose the Lambda function that stops your instances. Choose Configure details. Enter the following information in the provided fields:For Name, enter a meaningful name, such as “StopEC2Instances.”For Description, add a meaningful description, such as “stops EC2 instances every day at night.”For State, select Enabled. Choose Create rule. To restart your instances in the morning, repeat these steps and use your preferred start time.","categories":[{"name":"Cloud","slug":"Cloud","permalink":"http://blog.noobish.in/categories/Cloud/"}],"tags":[{"name":"ec2","slug":"ec2","permalink":"http://blog.noobish.in/tags/ec2/"},{"name":"lambda","slug":"lambda","permalink":"http://blog.noobish.in/tags/lambda/"}]},{"title":"Protractor Tutorial","slug":"protractor-tutorial","date":"2017-02-04T14:07:18.000Z","updated":"2018-01-13T15:58:45.852Z","comments":true,"path":"2017/02/04/protractor-tutorial/","link":"","permalink":"http://blog.noobish.in/2017/02/04/protractor-tutorial/","excerpt":"","text":"What is Protractor?According to the official protractor website, “Protractor is an end-to-end test framework for Angular and AngularJS applications. Protractor runs tests against your application running in a real browser, interacting with it as a user would.”Some of the nice features of protractor areProtractor is built on top of webdriverjs framework which uses native events and browser-specific drivers to interact with your application as a user would.Protractor supports Angular-specific locator strategies, which allows you to test Angular-specific elements without any setup effort on your part.You no longer need to add waits and sleeps to your test. Protractor can automatically execute the next step in your test the moment the webpage finishes pending tasks, so you don’t have to worry about waiting for your test and webpage to sync.How Protractor Works?Jasmine/Mocha/Cucumber helps to create the test.Protractor helps to run the test.Selenium Server helps to manage browsers.Selenium WebDriver helps to invoke browsers APIsPrerequisitesnodejs - As protractor is a nodejs applicationJDK - To run the standalone selenium ServerSetupUse npm to install protractor globallynpm install -g protractorThe above command will install both protractor and webdriver-manager. webdriver-manager is used to run selenium standalone server.Next update the webdriver binaries withwebdriver-manager updateYou can start up a selenium server by runningwebdriver-manager startThis will start the server at http://localhost:4444/wd/hubProtractor configurationBefore we start writing our tests, first we need to configure protractor123456789101112131415// protractor.conf.jsexports.config = &#123; // The address at which selenium is running seleniumAddress: 'http://localhost:4444/wd/hub', // Browser in which app should open capabilities: &#123; browserName: 'chrome' &#125;, // Name of the test spec file to run specs: ['**/*.spec.js'], // To show the test results in different color jasmineNodeOpts: &#123; showColors: true &#125;&#125;; Jasmine overviewA birds-eye overview on Jasmine 1234567891011121314// Represents test suitedescribe('Test suite name', function() &#123; beforeEach(function() &#123; // code to be executed before each test case &#125;); afterEach(function() &#123; // code to be executed after each test case &#125;); it('name of test case', function() &#123; // code to be executed within the test case // Assertion statement expect('actual result').toEqual('expected result'); &#125;);&#125;); Lets write our first testBy default protractor is configured to use Jasmine for writing the tests. However you can use mocha or cucumber as well.In this tutorial we are going to use Jasmine for writing our tests. Lets write the below test in a example.spec.js file to check if our protractor configuration Works.123456// example.spec.jsdescribe('Protractor check', function() &#123; it('should be true', function() &#123; expect(true).toBe(true); &#125;);&#125;); Now run protractor protractor.conf.js in command line in the working directory and you can see the test gets executed and chrome opens for a moment and closes immediately and you can see the result similar to below in your terminal. Interacting with elementsNow let’s modify the test to interact with elements on the page. Change example.spec.js to the following:123456789101112describe('Protractor Demo App', function() &#123; it('should add one and two', function() &#123; browser.get('http://juliemr.github.io/protractor-demo/'); element(by.model('first')).sendKeys(1); element(by.model('second')).sendKeys(2); element(by.id('gobutton')).click(); expect(element(by.binding('latest')).getText()). toEqual('5'); // This is wrong! &#125;);&#125;); For now just skip the browser.get() method and lets focus on element and by methods provided by protractor. element method is used to find HTML elements on the page and it returns ElementFinder object which has methods like getText, sendKeys and click etc., to interact with the element. The by object is used to create locators.In the above example by.model(&#39;first&#39;) to find the element with ng-model=&quot;first&quot;. If you inspect the Calculator page source, you will see this is &lt;input type=&quot;text&quot; ng-model=&quot;first&quot;&gt;. by.id(&#39;gobutton&#39;) to find the element with the given id. This finds &lt;button id=&quot;gobutton&quot;&gt;. by.binding(&#39;latest&#39;) to find the element bound to the variable latest. This finds the span containing Stay tuned for Part 2!!","categories":[{"name":"Web","slug":"Web","permalink":"http://blog.noobish.in/categories/Web/"}],"tags":[{"name":"protractor","slug":"protractor","permalink":"http://blog.noobish.in/tags/protractor/"},{"name":"e2e","slug":"e2e","permalink":"http://blog.noobish.in/tags/e2e/"},{"name":"testing","slug":"testing","permalink":"http://blog.noobish.in/tags/testing/"},{"name":"angularjs","slug":"angularjs","permalink":"http://blog.noobish.in/tags/angularjs/"}]},{"title":"Hexo + Github Pages = Your own blog site","slug":"Hexo-Github-Pages-Your-own-blog-site","date":"2015-10-07T02:30:08.000Z","updated":"2015-10-07T17:53:52.536Z","comments":true,"path":"2015/10/07/Hexo-Github-Pages-Your-own-blog-site/","link":"","permalink":"http://blog.noobish.in/2015/10/07/Hexo-Github-Pages-Your-own-blog-site/","excerpt":"","text":"What is Hexo?Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.InstallationRequirements* [nodejs](https://nodejs.org/en/) * [git](https://git-scm.com/)","categories":[{"name":"Web","slug":"Web","permalink":"http://blog.noobish.in/categories/Web/"}],"tags":[]}]}